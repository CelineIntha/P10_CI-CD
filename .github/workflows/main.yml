name: Build & test - Java + Angular

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, ci-cd/report-and-sonar-fix ]

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  test-back:
    runs-on: ubuntu-latest
    name: Back-end - tests & coverage
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage and SonarCloud (back-end)
        working-directory: back
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=CelineIntha_P10_CI-CD \
            -Dsonar.organization=celineintha \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Upload JUnit test report
        uses: actions/upload-artifact@v4
        with:
          name: junit-report
          path: back/target/surefire-reports/

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco/

  test-front:
    runs-on: ubuntu-latest
    name: Front-end - tests & coverage
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: front
        run: npm ci

      - name: Run tests with coverage
        working-directory: front
        run: npm run test -- --watch=false --code-coverage --browsers=ChromeHeadless

      - name: Upload front-end coverage report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/

  test-report:
    name: Back-end JUnit report summary
    needs: [ test-back ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download JUnit report
        uses: actions/download-artifact@v4
        with:
          name: junit-report
          path: reports/junit

      - name: Publish JUnit test results
        uses: dorny/test-reporter@v1
        with:
          name: JUnit Tests Summary
          path: reports/junit/*.xml
          reporter: java-junit
          fail-on-error: false

  sonarcloud-front:
    name: SonarCloud analysis - front-end
    runs-on: ubuntu-latest
    needs: [ test-front ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: front
        run: npm ci

      - name: Run SonarCloud scanner for front-end
        working-directory: front
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=celineintha-p10-ci-cd-front \
            -Dsonar.organization=celineintha \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.sources=src \
            -Dsonar.tests=src \
            -Dsonar.test.inclusions=**/*.spec.ts \
            -Dsonar.javascript.lcov.reportPaths=coverage/bobapp/lcov.info \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker-publish:
    name: Docker build & push to Docker hub
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push back-end Docker image
        working-directory: back
        run: |
          docker build -t celineintha/p10-back:latest .
          docker push celineintha/p10-back:latest

      - name: Build and push front-end Docker image
        working-directory: front
        run: |
          docker build -t celineintha/p10-front:latest .
          docker push celineintha/p10-front:latest
